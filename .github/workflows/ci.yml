name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-ci

jobs:
  build-or-pull-image:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if Dockerfile.ci changed
        id: dockerfile-changed
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q "^Dockerfile.ci$"; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: image-tag
        run: |
          if [[ "${{ steps.dockerfile-changed.outputs.changed }}" == "true" ]]; then
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Log in to GitHub Container Registry
        if: steps.dockerfile-changed.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: steps.dockerfile-changed.outputs.changed == 'true'
        run: |
          docker build -f Dockerfile.ci -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Pull existing image
        if: steps.dockerfile-changed.outputs.changed == 'false'
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  test:
    needs: build-or-pull-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull CI image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-or-pull-image.outputs.image-tag }}

      - name: Run unit tests
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-or-pull-image.outputs.image-tag }} \
            bash -c 'mkdir -p /root/.config/aseprite-mcp && \
              printf "{\"aseprite_path\":\"/build/aseprite/build/bin/aseprite\",\"temp_dir\":\"/tmp/aseprite-mcp\",\"timeout\":30,\"log_level\":\"info\"}" > /root/.config/aseprite-mcp/config.json && \
              cd /workspace && \
              go test -v -race -cover ./...'

      - name: Run integration tests
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-or-pull-image.outputs.image-tag }} \
            bash -c 'mkdir -p /root/.config/aseprite-mcp && \
              printf "{\"aseprite_path\":\"/build/aseprite/build/bin/aseprite\",\"temp_dir\":\"/tmp/aseprite-mcp\",\"timeout\":30,\"log_level\":\"info\"}" > /root/.config/aseprite-mcp/config.json && \
              cd /workspace && \
              go test -tags=integration -v ./...'
