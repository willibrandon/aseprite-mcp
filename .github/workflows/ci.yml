name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ci:
    name: Build, Lint & Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.23']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install MSVC (Windows only)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev

      - name: Install build dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install ninja p7zip

      - name: Cache Skia
        id: cache-skia
        uses: actions/cache@v4
        with:
          path: skia
          key: skia-${{ runner.os }}-m116-2024-01-05

      - name: Download Skia
        if: steps.cache-skia.outputs.cache-hit != 'true'
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            curl -L https://github.com/aseprite/skia/releases/download/m116-2024-01-05/Skia-Linux-Release-x64-libstdc++.zip -o skia.zip
          elif [ "$RUNNER_OS" == "Windows" ]; then
            curl -L https://github.com/aseprite/skia/releases/download/m116-2024-01-05/Skia-Windows-Release-x64.zip -o skia.zip
          elif [ "$RUNNER_OS" == "macOS" ]; then
            curl -L https://github.com/aseprite/skia/releases/download/m116-2024-01-05/Skia-macOS-Release-x64.zip -o skia.zip
          fi
          unzip skia.zip -d skia
        shell: bash

      - name: Checkout Aseprite
        uses: actions/checkout@v4
        with:
          repository: aseprite/aseprite
          ref: v1.3.10
          submodules: recursive
          path: aseprite

      - name: Build Aseprite
        run: |
          cd aseprite
          mkdir build
          cd build
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_UI=OFF \
            -DENABLE_TESTS=OFF \
            -DENABLE_SCRIPTING=ON \
            -DLAF_BACKEND=none \
            -DSKIA_DIR=${{ github.workspace }}/skia \
            -DSKIA_LIBRARY_DIR=${{ github.workspace }}/skia/out/Release-x64 \
            ..
          ninja aseprite
        shell: bash

      - name: Install Aseprite to PATH
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "${{ github.workspace }}/aseprite/build/bin" >> $GITHUB_PATH
          else
            echo "${{ github.workspace }}/aseprite/build/bin" >> $GITHUB_PATH
          fi
        shell: bash

      - name: Verify Aseprite installation
        run: aseprite --version
        shell: bash

      - name: Create config directory
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            mkdir -p "$USERPROFILE/.config/aseprite-mcp"
          else
            mkdir -p "$HOME/.config/aseprite-mcp"
          fi
        shell: bash

      - name: Find Aseprite path (Unix)
        if: runner.os != 'Windows'
        run: |
          ASEPRITE_PATH=$(which aseprite)
          echo "Found Aseprite at: $ASEPRITE_PATH"
          cat > "$HOME/.config/aseprite-mcp/config.json" << EOF
          {
            "aseprite_path": "$ASEPRITE_PATH",
            "temp_dir": "/tmp/aseprite-mcp-test",
            "timeout": 30,
            "log_level": "info"
          }
          EOF
        shell: bash

      - name: Find Aseprite path (Windows)
        if: runner.os == 'Windows'
        run: |
          $asepritePath = (Get-Command aseprite).Path
          Write-Host "Found Aseprite at: $asepritePath"
          $config = @{
            aseprite_path = $asepritePath
            temp_dir = "$env:TEMP\aseprite-mcp-test"
            timeout = 30
            log_level = "info"
          } | ConvertTo-Json
          $config | Out-File -FilePath "$env:USERPROFILE\.config\aseprite-mcp\config.json" -Encoding utf8
        shell: powershell

      - name: Download dependencies
        run: go mod download

      - name: Lint - go vet
        run: go vet ./...

      - name: Lint - go fmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files need formatting:"
            gofmt -s -l .
            exit 1
          fi
        shell: bash

      - name: Build
        run: go build -v -o bin/aseprite-mcp${{ runner.os == 'Windows' && '.exe' || '' }} ./cmd/aseprite-mcp

      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Run integration tests
        run: go test -tags=integration -v -race ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.txt
          flags: unittests
          name: codecov-${{ matrix.os }}
        continue-on-error: true